package site

import (
	"github.com/ocuroot/templbuildr/site/components/section"
	"github.com/ocuroot/templbuildr/site/components/code"
)

templ Index() {
	@root(RootProps{
		Path: "/",
		Canonical: Canonical("/"),
	}) {
		<!-- Hero Section -->
		<section class="hero-section">
			<div class="hero-background">
				<div class="hero-overlay"></div>
			</div>
			
			<div class="hero-content">
				<div class="hero-text">
					<h1 class="hero-title">
						Open source CI / CD orchestration for multi-environment releases
					</h1>
					<p class="hero-subtitle">
						Map out dependencies and implement custom logic to make managing dev and production environments easy.
					</p>
					<div class="hero-cta">
						<a href="/docs" class="button" data-vmtrc="CTAClick" data-vmtrc-cta="docs">
							Read the Docs
						</a>
						<a href="https://github.com/ocuroot/ocuroot" class="button" data-vmtrc="CTAClick" data-vmtrc-cta="repo">
							View Repo
							<img class="btn-icon" src="/icons/github.svg" alt="GitHub" />
						</a>
					</div>
				</div>
			</div>
		</section>

		@section.ContentSectionWithTextRight("Environments as a first-class concept",
			DeclareEnvironments(),
		) {
			<p>
				Your team think about deployments in terms of the destination: dev, staging, production.
				But many CI solutions don&apos;t go beyond the pipeline, making adding an environment an all-hands-on-deck slog.
			</p>
			<p>
				Got a big customer demanding a dedicated environment for their data? Need an EU region for GDPR?
				Want to spin up a load-testing environment? Good luck!
			</p>
			<p>
				Ocuroot treats environments as a first-class concept, so adding or removing an environment can be as simple as
				editing a single file.
			</p>
		}

		@section.ContentSectionWithTextLeft(
			"Escape YAML hell and long cycle times",
			EscapeYAMLHell(),
		) {
			<p>
				Centralized, YAML-based CI solutions two big problems. You need to learn their particular YAML DSL to even do
				simple branching logic. And you have to push to the remote to test every, single, change.
			</p>
			<p>
				Ocuroot configuration is defined with Python-like Starlark syntax. So if you need an if statement or a for loop, you can just write one.
				Plus you can run your logic locally for super-tight feedback loops.
			</p>
			<p>
				There&apos;s even a REPL!
			</p>
		}

		@section.ContentSectionWithTextRight(
			"See what's running, where",
			section.ContentImage(
				"/images/see-production.svg", 
				"An illustration showing an eye connected to various cloud resources, with an excess database crossed out",
			),
		) {
			<p>
				Follow the state of your infrastructure and applications in Ocuroot, and quickly shut down anything that&apos;s no longer needed.
			</p>
			<p>
				With a complete view of your production resources, you can identify unused or underutilized instances, old test environments, and orphaned services that are costing you money without providing value.
			</p>
			<p>
				Ocuroot makes it easy to track resource usage across all your environments, helping you maintain a lean and cost-effective infrastructure.
			</p>
		}

		// TODO: Add section about using your existing tools

		@section.ContentSectionWithTextLeft(
			"Try it for yourself!",
			GitRepoCard("https://github.com/ocuroot/quickstart"),
		) {
			<p>
				Read this far and want to see Ocuroot in action? Why not try the quickstart?
			</p>
			<p>
				<a href="https://github.com/ocuroot/quickstart" class="button" data-vmtrc="CTAClick" data-vmtrc-cta="quickstart">
					Quickstart
					<img class="btn-icon" src="/icons/github.svg" alt="GitHub" />
				</a>
			</p>
		}
	}
}

templ GitRepoCard(url string) {
	<div class="git-repo-card" data-repo-url={ url }>		
		<div class="repo-loading">Loading repository information...</div>
	</div>
}

templ DeclareEnvironments() {
	@code.TerminalCode(
		"environments.ocu.star",
		"python",
		`for i in range(1, 10):
    register_environment(environment(
        name=f"dev-{i}",
        attributes={
            "type": "dev",
            "region": "us-east-1",
        }
    ))

register_environment(environment(
    name="staging",
    attributes={
        "type": "staging",
        "region": "eu-west-2",
    }
))`,
	)
}

templ EscapeYAMLHell() {
	@code.TerminalCode("Terminal",
		"bash",
		`$ ocuroot repl frontend/package.ocu.star

Starting Starlark REPL with Ocuroot SDK
Type Ctrl+D to exit (Ctrl+C will interrupt the current operation)
Type 'help()' to see available SDK modules
Loaded repo: quickstart
Loaded file: frontend/package.ocu.star
Available user functions: 3

>>> environments()
[struct(attributes = {"frontend_port": "8080", "type": "staging"}, dict = <function _env_to_dict>, json = <function _env_to_json>, name = "staging")]
>>> `)
}	