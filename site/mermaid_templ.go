// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.920
package site

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// MermaidScript adds the Mermaid.js library and initializes it
func MermaidScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script type=\"module\">\n\t\timport mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n\t\t\n\t\t// Initialize Mermaid with configuration\n\t\tmermaid.initialize({\n\t\t\tstartOnLoad: true,\n\t\t\ttheme: 'default',\n\t\t\tthemeVariables: {\n\t\t\t\tprimaryColor: '#f3e5f5',\n\t\t\t\tprimaryTextColor: '#4a148c',\n\t\t\t\tprimaryBorderColor: '#4a148c',\n\t\t\t\tlineColor: '#666',\n\t\t\t\tsecondaryColor: '#e1f5fe',\n\t\t\t\ttertiaryColor: '#e8f5e8'\n\t\t\t},\n\t\t\tflowchart: {\n\t\t\t\tuseMaxWidth: true,\n\t\t\t\thtmlLabels: true\n\t\t\t},\n\t\t\tblock: {\n\t\t\t\tuseMaxWidth: true\n\t\t\t}\n\t\t});\n\n\t\t// Function to render Mermaid diagrams\n\t\tfunction renderMermaidDiagrams() {\n\t\t\tconst mermaidElements = document.querySelectorAll('pre code.language-mermaid, .mermaid');\n\t\t\t\n\t\t\tmermaidElements.forEach((element, index) => {\n\t\t\t\t// If it's a code block, extract the content and create a proper mermaid div\n\t\t\t\tif (element.tagName === 'CODE' && element.classList.contains('language-mermaid')) {\n\t\t\t\t\tconst mermaidCode = element.textContent;\n\t\t\t\t\tconst mermaidDiv = document.createElement('div');\n\t\t\t\t\tmermaidDiv.className = 'mermaid';\n\t\t\t\t\tmermaidDiv.textContent = mermaidCode;\n\t\t\t\t\t\n\t\t\t\t\t// Replace the pre/code block with the mermaid div\n\t\t\t\t\tconst preElement = element.closest('pre');\n\t\t\t\t\tif (preElement) {\n\t\t\t\t\t\tpreElement.parentNode.replaceChild(mermaidDiv, preElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Re-run mermaid on the new elements\n\t\t\tmermaid.run();\n\t\t}\n\n\t\t// Run when DOM is loaded\n\t\tif (document.readyState === 'loading') {\n\t\t\tdocument.addEventListener('DOMContentLoaded', renderMermaidDiagrams);\n\t\t} else {\n\t\t\trenderMermaidDiagrams();\n\t\t}\n\n\t\t// Also run on theme changes (if you have theme switching)\n\t\tdocument.addEventListener('themeChanged', () => {\n\t\t\tmermaid.run();\n\t\t});\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
